% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/plot_acf.R
\name{plot_acf}
\alias{plot_acf}
\alias{plotACF}
\title{Autocorrelation Function Plot}
\usage{
plot_acf(object, ..., variable = NULL, alpha = 0.95)

plotACF(object, ..., variable = NULL, alpha = 0.95)
}
\arguments{
\item{object}{An object of class 'auditor_model_residual' created with \code{\link{model_residual}} function.}

\item{...}{Other 'auditor_model_residual' objects to be plotted together.}

\item{variable}{Name of variable to order residuals on a plot.
If \code{variable="_y_"}, the data is ordered by a vector of actual response (\code{y} parameter
passed to the \code{\link[DALEX]{explain}} function).
If \code{variable = "_y_hat_"} the data on the plot will be ordered by predicted response.
If \code{variable = NULL}, unordered observations are presented.}

\item{alpha}{Confidence level of the interval.}
}
\value{
A ggplot object.
}
\description{
Plot Autocorrelation Function of models' residuals.
}
\examples{
dragons <- DALEX::dragons[1:100, ]

# fit a model
lm_model <- lm(life_length ~ ., data = dragons)

# use DALEX package to wrap up a model into explainer
lm_exp <- DALEX::explain(lm_model, data = dragons, y = dragons$life_length)

# validate a model with auditor
library(auditor)
lm_mr <- model_residual(lm_exp)

# plot results
plot(lm_mr, type = "acf")
plot_acf(lm_mr)


library(randomForest)
rf_model <- randomForest(life_length~., data = dragons)
rf_exp <- DALEX::explain(rf_model, data = dragons, y = dragons$life_length)
rf_mr <- model_residual(rf_exp)
plot_acf(lm_mr, rf_mr)
plot(lm_mr, rf_mr, type="acf")


}
